import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

const IS_PROD = process.env.NODE_ENV === 'production'

// prościutki limiter w pamięci (na jedną instancję)
const buckets = new Map<string, { tokens: number; ts: number }>()
const RATE = { capacity: 60, refillPerSec: 1 } // ~60 req/min/IP

function allow(ip: string) {
  const now = Date.now()
  const b = buckets.get(ip) || { tokens: RATE.capacity, ts: now }
  const elapsed = (now - b.ts) / 1000
  const refill = Math.floor(elapsed * RATE.refillPerSec)
  b.tokens = Math.min(RATE.capacity, b.tokens + refill)
  b.ts = refill ? now : b.ts
  if (b.tokens <= 0) { buckets.set(ip, b); return false }
  b.tokens -= 1; buckets.set(ip, b); return true
}

export function middleware(req: NextRequest) {
  const pathname = req.nextUrl.pathname

  // Nie dotykaj statycznych zasobów Next – potrzebne do ładowania JS/CSS
  if (
    pathname.startsWith('/_next/') ||
    pathname.startsWith('/favicon') ||
    pathname.startsWith('/icon-') ||
    pathname.startsWith('/apple-touch-icon') ||
    pathname.endsWith('.png') || pathname.endsWith('.jpg') ||
    pathname.endsWith('.ico') || pathname.endsWith('.svg')
  ) {
    return NextResponse.next()
  }

  // Rate-limit dla API
  if (pathname.startsWith('/api/')) {
    const ip = req.ip || req.headers.get('x-forwarded-for') || 'unknown'
    if (!allow(ip)) {
      return new NextResponse(JSON.stringify({ error: 'Too Many Requests' }), {
        status: 429,
        headers: { 'Content-Type': 'application/json' }
      })
    }
  }

  const res = NextResponse.next()

  // Nagłówki bezpieczeństwa
  res.headers.set('X-Content-Type-Options', 'nosniff')
  res.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  res.headers.set('Permissions-Policy', 'geolocation=(), microphone=(), camera=()')
  res.headers.set('X-Frame-Options', 'SAMEORIGIN')

  const cspProd = [
    "default-src 'self'",
    "img-src 'self' https: data:",
    "style-src 'self' 'unsafe-inline'",
    "script-src 'self' 'unsafe-inline' https://www.googletagmanager.com",
    "connect-src 'self' https://api.stripe.com https://www.google-analytics.com",
    "frame-src https://js.stripe.com"
  ].join('; ')

  // DEV: pozwól na eval, blob i WebSocket (HMR) oraz localhost
  const cspDev = [
    "default-src 'self'",
    "img-src 'self' https: data:",
    "style-src 'self' 'unsafe-inline'",
    "script-src 'self' 'unsafe-inline' 'unsafe-eval' blob: https://www.googletagmanager.com",
    "connect-src 'self' http://localhost:* ws: wss: https://api.stripe.com https://www.google-analytics.com",
    "frame-src https://js.stripe.com"
  ].join('; ')

  res.headers.set('Content-Security-Policy', IS_PROD ? cspProd : cspDev)

  return res
}

// Stosuj dla całego serwisu (statyczne i tak odfiltrowane wyżej)
export const config = {
  matcher: ['/((?!_next/static|_next/image).*)'],
}
